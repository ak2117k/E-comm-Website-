const getProductDetails = async (req, res) => {
  try {
    let {
      gender,
      category,
      sizes,
      brand,
      color,
      discount,
      sort,
      page,
      limit,
      search,
    } = req.query;

    // Parse and validate query parameters
    const parseQuery = (param) =>
      param ? param.split("_").map((p) => p.trim()) : [];
    const gen = parseQuery(gender);
    const categories = parseQuery(category);
    const colors = parseQuery(color);
    const allsizes = parseQuery(sizes);
    const brands = parseQuery(brand);
    const discounts = parseQuery(discount);

    const sortingType = sort === "High" ? -1 : 1;
    page = isNaN(Number(page)) ? 1 : Number(page);
    limit = isNaN(Number(limit)) ? 50 : Number(limit);
    console.log(page, limit);
    const skip = (page - 1) * limit;
    console.log("skiping value", skip);

    const pipeline = [
      ...(search
        ? [
            {
              $search: {
                index: "default", // Name of your search index
                text: {
                  query: search,
                  path: ["category", "brand", "info", "description"], // Fields to search
                  fuzzy: {
                    maxEdits: 2, // Allow up to 2 character differences
                    prefixLength: 1, // Match the first character exactly
                  },
                },
              },
            },
          ]
        : []),
      ...(gen.length > 0 ? [{ $match: { gender: { $in: gen } } }] : []),
      ...(categories.length > 0
        ? [{ $match: { category: { $in: categories } } }]
        : []),

      ...(colors.length > 0 ? [{ $match: { color: { $in: colors } } }] : []),
      ...(allsizes.length > 0 ? [{ $match: { size: { $in: allsizes } } }] : []),
      ...(brands.length > 0 ? [{ $match: { brand: { $in: brands } } }] : []),
      ...(discounts.length > 0
        ? [{ $match: { discount: { $in: discounts.map(Number) } } }]
        : []),

      {
        $facet: {
          totalProducts: [{ $count: "total" }],
          paginatedProducts: [
            // { $sort: { price: sortingType } },
            { $skip: skip },
            { $limit: limit },
          ],
          differentCategories: [
            { $group: { _id: null, categories: { $addToSet: "$category" } } },
            { $project: { _id: 0, categories: 1 } },
          ],
          differentColors: [
            { $group: { _id: null, colors: { $addToSet: "$color" } } },
            { $project: { _id: 0, colors: 1 } },
          ],
          differentSizes: [
            { $unwind: "$productQty" },
            { $group: { _id: null, sizes: { $addToSet: "$productQty.size" } } },
            { $project: { _id: 0, sizes: 1 } },
          ],
          differentBrands: [
            { $group: { _id: null, brands: { $addToSet: "$brand" } } },
            { $project: { _id: 0, brands: 1 } },
          ],
          differentDiscounts: [
            { $group: { _id: null, discounts: { $addToSet: "$discount" } } },
            { $project: { _id: 0, discounts: 1 } },
          ],
          differentGenders: [
            { $group: { _id: null, genders: { $addToSet: "$gender" } } },
            { $project: { _id: 0, genders: 1 } },
          ],
        },
      },
    ];

    let result = await Product.aggregate(pipeline).allowDiskUse(true);
    const totalProducts = result[0]?.totalProducts?.[0]?.total || 0;

    if (result[0]?.paginatedProducts?.length > 0) {
      console.log(result[0]?.paginatedProducts.length);
      return res.status(200).json({
        message: "Products fetched successfully",
        total: totalProducts,
        products: result[0]?.paginatedProducts || [],
        differentCategories:
          result[0]?.differentCategories?.[0]?.categories || [],
        differentColors: result[0]?.differentColors?.[0]?.colors || [],
        differentSizes: result[0]?.differentSizes?.[0]?.sizes || [],
        differentBrands: result[0]?.differentBrands?.[0]?.brands || [],
        differentDiscounts: result[0]?.differentDiscounts?.[0]?.discounts || [],
        differentGenders: result[0]?.differentGenders?.[0]?.genders || [],
      });
    }

    return res.status(404).json({ message: "Products not found" });
  } catch (error) {
    console.error("Error fetching product details:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};


//Product Container


import React, { useEffect, useState, useRef } from "react";
import { useSelector } from "react-redux";
import { Link } from "react-router-dom";
import { useDispatch } from "react-redux";
import { FaArrowUp } from "react-icons/fa";

const ProductContainer = ({ fetchProducts, loaderRef, filters }) => {
  const products = useSelector((state) => state.product.data);
  const productsCount = useSelector((state) => state.product.totalProducts);
  const categories = useSelector((state) => state.product.category);
  const [page, setPage] = useState(1);
  const dispatch = useDispatch();
  const [isLoadingMore, setIsLoadingMore] = useState(false); // Track loading state for infinite scroll
  const [showBackToTop, setShowBackToTop] = useState(false);

  const containerRef = useRef(null);

  const handleScroll = () => {
    if (loaderRef.current) {
      const bottom = loaderRef.current.getBoundingClientRect().bottom;
      const isBottom = bottom <= window.innerHeight;

      const scrollPosition = containerRef.scrollTop;

      if (scrollPosition > 10) {
        setShowBackToTop(true);
      } else {
        setShowBackToTop(false);
      }
      if (isBottom && products.length < productsCount && !isLoadingMore) {
        // Fetch the next page of products
        setIsLoadingMore(true);
        setPage((prevPage) => prevPage + 1);
      }
    }
  };

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll); // Cleanup on unmount
  }, [dispatch, products, productsCount, isLoadingMore]); // Re-run this effect when the product list or product count changes

  useEffect(() => {
    if (page > 1) {
      fetchProducts(page, filters).then(() => {
        setIsLoadingMore(false); // Reset loading state after data is fetched
      });
    }
  }, [dispatch, page, filters]);

  return (
    <div className="h-full overflow-y-auto scrollbar-none" ref={containerRef}>
      <div className="">
        <h2 className="text-gray-600">{productsCount} Products </h2>
      </div>

      <div className="grid grid-cols-3 gap-2ml-2 mt-2">
        {products.map((item) => (
          <Link to={`/p/${item.info}`} key={item._id}>
            <div className="w-[360px] h-[685px]">
              {/* Product Image Section */}
              <div className="w-[360px] h-[550px] bg-gray-100 flex justify-center items-center relative">
                {item.topTag && (
                  <div
                    className="absolute top-0 left-0 p-2 text-xs font-bold text-white uppercase"
                    style={{
                      backgroundColor:
                        item.topTag === "BUY 3 FOR"
                          ? "green"
                          : item.topTag === "SALE"
                          ? "red"
                          : "gray",
                    }}
                  >
                    {item.topTag === "BUY 3 FOR" ? (
                      <>
                        <span className="uppercase">{item.topTag}</span>
                        <span>{` ₹${item.oprice * 3 - 100}`}</span>
                      </>
                    ) : (
                      item.topTag
                    )}
                  </div>
                )}
                <img
                  src={item.image1}
                  className="h-[550px] w-[360px] object-cover"
                  alt={item.info}
                  onError={(e) => {
                    e.target.src =
                      "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTFAP-fHSPTb5yLxrT9nlDKdUVPMM_xjCdCxw&s";
                    e.target.style.height = "150px";
                    e.target.style.width = "160px";
                  }}
                />
              </div>

              {/* Product Details Section */}
              <div className="Details w-[360px] h-[100px] ml-2">
                <div className="flex justify-between">
                  <span className="text-black font-bold text-sm">
                    {item.brand}
                  </span>
                  <div className="cursor-pointer">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth={2}
                      stroke="currentColor"
                      className="w-6 h-6"
                      style={{ fill: "white" }}
                    >
                      <path
                        stroke="#303030"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="1.5"
                        d="M12 20S3 14.91 3 8.727c0-1.093.375-2.152 1.06-2.997a4.672 4.672 0 0 1 2.702-1.638 4.639 4.639 0 0 1 3.118.463A4.71 4.71 0 0 1 12 6.909a4.71 4.71 0 0 1 2.12-2.354 4.639 4.639 0 0 1 3.118-.463 4.672 4.672 0 0 1 2.701 1.638A4.756 4.756 0 0 1 21 8.727C21 14.91 12 20 12 20Z"
                      ></path>
                    </svg>
                  </div>
                </div>
                <p className="text-gray-600 truncate">{item.description}</p>
                <div className="flex gap-2">
                  <span className="text-black font-bold">₹{item.oprice}</span>
                  {item.price !== item.oprice && (
                    <span className="relative text-gray-500">
                      <span className="absolute top-1/2 left-0 right-0 border-b-2 border-gray-500"></span>
                      ₹{item.price}
                    </span>
                  )}
                  {item.price !== item.oprice && (
                    <span className="text-green-500">
                      {(
                        ((item.price - item.oprice) / item.price) *
                        100
                      ).toFixed(0)}
                      % OFF
                    </span>
                  )}
                </div>
                {item.bottomTag && (
                  <div className="mt-4 border-2 border-black text-xs text-gray-500 text-center">
                    {item.bottomTag}
                  </div>
                )}
              </div>
            </div>
          </Link>
        ))}
        {showBackToTop && (
          <button className="absolute z-100 top-[400px] left-[1450px]">
            <span className="">
              <span className="flex items-center justify-center">
                <FaArrowUp />
              </span>
              <span className="flex items-center justify-center">Top</span>
            </span>
          </button>
        )}
      </div>
      {products.length < productsCount && products.length > 0 && (
        <div
          ref={loaderRef}
          style={{ height: "70px", marginBottom: "50px" }}
          className="border-2 border-red-300"
        >
          {isLoadingMore && (
            <div className="flex h-[70px] justify-center mt-[2px] bg-opacity-50 items-center">
              <img
                src="https://www.bewakoof.com/images/bwkf-loader.gif"
                className="h-[50px] w-[50px] justify-center"
              />
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ProductContainer;

